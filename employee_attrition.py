# -*- coding: utf-8 -*-
"""Employee_attrition.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vUZyyuYw4XXnCmhOlLcAkF9WD28Uw-X1
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report, f1_score

df = pd.read_csv('/content/WA_Fn-UseC_-HR-Employee-Attrition.csv')

df.info()

df.head()

y=df['Attrition']
y.head()

X=df.drop(['Attrition'],axis=1)
X.head()

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
y=le.fit_transform(y)

print(y)

X.describe()

X.info()

numerical_columns = ['Age', 'DailyRate', 'DistanceFromHome', 'JobSatisfaction', 'MonthlyIncome']
merged_df = X[numerical_columns].copy()
merged_df['Attrition'] = y
plot  = sns.pairplot(merged_df, hue='Attrition', diag_kind='kde')
plot._legend.remove()
plot.fig.legend(labels=['Attrition', 'Not Attrition'], title='Attrition', loc='upper right')
plt.show()

df['Department'].value_counts()

df['Attrition'].value_counts()

df['EducationField'].value_counts()

df['BusinessTravel'].value_counts()

df['Gender'].value_counts()

df['JobRole'].value_counts()

df['MaritalStatus'].value_counts()

df['Over18'].value_counts()

df['StandardHours'].value_counts()

df['EmployeeCount'].value_counts()

df['OverTime'].value_counts()

columns_to_drop = ["StandardHours", "Over18","EmployeeCount"]
X = X.drop(columns=columns_to_drop,axis =1)

X.head()

categorical_columns = ["Department", "EducationField","BusinessTravel","MaritalStatus","JobRole"]

X_with_dummies = pd.get_dummies(X, columns=categorical_columns)
X_with_dummies.head()

X_with_dummies.info()

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
encode_gender = df['Gender']
encode_gender=le.fit_transform(encode_gender)
encode_Overtime = df['OverTime']
encode_Overtime=le.fit_transform(encode_Overtime)

X_with_dummies['Gender']=encode_gender
X_with_dummies['OverTime']=encode_Overtime
X_with_dummies.head()

X_with_dummies.info()

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X_with_dummies, y, test_size=0.25, random_state=42)
X_train.shape, X_test.shape , y_train.shape, y_test.shape

from sklearn.linear_model import LogisticRegression
logisticRegression_obj  = LogisticRegression()
logisticRegression_obj.fit(X_train,y_train)

y_pred_lr = logisticRegression_obj.predict(X_test)

accuracy_logisticRegression = accuracy_score(y_test, y_pred_lr)
confusion_matrix_logisticRegression = confusion_matrix(y_test, y_pred_lr)
classification_report_logisticRegression = classification_report(y_test, y_pred_lr)
f1_score_logisticRegression = f1_score(y_test, y_pred_lr)
print("Accuracy:", accuracy_logisticRegression)
print("Confusion Matrix:")
print(confusion_matrix_logisticRegression)
print("Classification Report:")
print(classification_report_logisticRegression)
print("F1 Score:", f1_score_logisticRegression)

from sklearn.tree import DecisionTreeClassifier
decisionTree_obj = DecisionTreeClassifier()
decisionTree_obj.fit(X_train,y_train)
y_pred_dt = decisionTree_obj.predict(X_test)

accuracy_decision_tree = accuracy_score(y_test, y_pred_dt)
confusion_matrix_decision_tree = confusion_matrix(y_test, y_pred_dt)
classification_report_decision_tree = classification_report(y_test, y_pred_dt)
f1_score_decision_tree = f1_score(y_test, y_pred_dt)
print("Accuracy:", accuracy_decision_tree)
print("Confusion Matrix:")
print(confusion_matrix_decision_tree)
print("Classification Report:")
print(classification_report_decision_tree)
print("F1 Score:", f1_score_decision_tree)

from sklearn.ensemble import RandomForestClassifier
randomForest_obj = RandomForestClassifier()
randomForest_obj.fit(X_train,y_train)
y_pred_rf = randomForest_obj.predict(X_test)

accuracy_rf = accuracy_score(y_test, y_pred_rf)
confusion_matrix_rf = confusion_matrix(y_test, y_pred_rf)
classification_report_rf = classification_report(y_test, y_pred_rf)
f1_score_rf = f1_score(y_test, y_pred_rf)
print("Accuracy:", accuracy_rf)
print("Confusion Matrix:")
print(confusion_matrix_rf)
print("Classification Report:")
print(classification_report_rf)
print("F1 Score:", f1_score_rf)

from sklearn.neighbors import KNeighborsClassifier
knn_obj = KNeighborsClassifier()
knn_obj.fit(X_train,y_train)
y_pred_knn = knn_obj.predict(X_test)

accuracy_knn = accuracy_score(y_test, y_pred_knn)
confusion_matrix_knn = confusion_matrix(y_test, y_pred_knn)
classification_report_knn = classification_report(y_test, y_pred_knn)
f1_score_knn = f1_score(y_test, y_pred_knn)
print("Accuracy:", accuracy_knn)
print("Confusion Matrix:")
print(confusion_matrix_knn)
print("Classification Report:")
print(classification_report_knn)
print("F1 Score:", f1_score_knn)

from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import AdaBoostClassifier

base_estimator = DecisionTreeClassifier(max_depth=5)

n_estimators = 100
adaboost_model = AdaBoostClassifier(base_estimator=base_estimator, n_estimators=n_estimators)
adaboost_model.fit(X_train, y_train)
y_pred_adaboost = adaboost_model.predict(X_test)

accuracy_adaboost = accuracy_score(y_test, y_pred_adaboost)
confusion_matrix_adaboost = confusion_matrix(y_test, y_pred_adaboost)
classification_report_adaboost = classification_report(y_test, y_pred_adaboost)
f1_score_adaboost = f1_score(y_test, y_pred_adaboost)
print("Accuracy:", accuracy_adaboost)
print("Confusion Matrix:")
print(confusion_matrix_adaboost)
print("Classification Report:")
print(classification_report_adaboost)
print("F1 Score:", f1_score_adaboost)

import matplotlib.pyplot as plt

models = ['Logistic Reg. model', 'Decision tree model', 'Random Forest model',  'KNN model', 'Adaboost model']
accuracy = [accuracy_logisticRegression, accuracy_decision_tree, accuracy_rf, accuracy_knn, accuracy_adaboost]

plt.bar(models, accuracy)
plt.xlabel('Machine Learning Models')
plt.ylabel('Accuracy')
plt.title('Model Accuracy Comparison')
plt.xticks(rotation=90)
plt.show()

